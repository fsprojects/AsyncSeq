
namespace FSharp.Control

/// An asynchronous sequence represents a delayed computation that can be
/// started to produce either Cons value consisting of the next element of the 
/// sequence (head) together with the next asynchronous sequence (tail) or a 
/// special value representing the end of the sequence (Nil)
type AsyncSeq<'T> = Async<AsyncSeqInner<'T>>

/// The interanl type that represents a value returned as a result of
/// evaluating a step of an asynchronous sequence
and AsyncSeqInner<'T> =
    internal | Nil
             | Cons of 'T * AsyncSeq<'T>

[<RequireQualifiedAccess>]
module AsyncSeq = 
    /// Creates an empty asynchronou sequence that immediately ends
    [<GeneralizableValueAttribute>]
    val empty<'T> : AsyncSeq<'T>

    /// Creates an asynchronous sequence that generates a single element and then ends
    val singleton : v:'T -> AsyncSeq<'T>

    /// Generates an async sequence using the specified generator function.
    val unfoldAsync : f:('State -> Async<('T * 'State) option>) -> s:'State -> AsyncSeq<'T>

    /// Creates an async sequence which repeats the specified value indefinitely.
    val replicate : v:'T -> AsyncSeq<'T>

    /// Yields all elements of the first asynchronous sequence and then 
    /// all elements of the second asynchronous sequence.
    val append : seq1:AsyncSeq<'T> -> seq2:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Computation builder that allows creating of asynchronous 
    /// sequences using the 'asyncSeq { ... }' syntax
    type AsyncSeqBuilder =

        /// Internal use only
        new : unit -> AsyncSeqBuilder

        /// Implements binding for the asyncSeq computation builder.
        member Bind : inp:Async<'T> * body:('T -> AsyncSeq<'U>) -> AsyncSeq<'U>

        /// Implements sequential composition for the asyncSeq computation builder.
        member Combine : seq1:AsyncSeq<'T> * seq2:AsyncSeq<'T> -> AsyncSeq<'T>

        /// Implements delay for the asyncSeq computation builder.
        member Delay : f:(unit -> AsyncSeq<'T>) -> AsyncSeq<'T>

        /// For loop that iterates over a synchronous sequence (and generates
        /// all elements generated by the asynchronous body)
        member For : seq:seq<'T> * action:('T -> AsyncSeq<'TResult>) -> AsyncSeq<'TResult>

        /// Implements "for" loops for the asyncSeq computation builder.
        ///
        /// Asynchronous for loop - for all elements from the input sequence,
        /// generate all elements produced by the body (asynchronously). See
        /// also the AsyncSeq.collect function.
        member For : seq:AsyncSeq<'T> * action:('T -> AsyncSeq<'TResult>) -> AsyncSeq<'TResult>

        /// Implements "return" for the asyncSeq computation builder.
        member Return : 'unit -> AsyncSeq<'T> 

        /// Implements "try-finally" for the asyncSeq computation builder.
        member TryFinally : body:AsyncSeq<'T> * compensation:(unit -> unit) -> AsyncSeq<'T>

        /// Implements "try-with" for the asyncSeq computation builder.
        member TryWith : body:AsyncSeq<'T> * handler:(exn -> AsyncSeq<'T>) -> AsyncSeq<'T>

        /// Implements "use" for the asyncSeq computation builder.
        member Using : resource:'T * binder:('T -> AsyncSeq<'U>) -> AsyncSeq<'U> when 'T :> System.IDisposable

        /// Implements "while" for the asyncSeq computation builder.
        member While : gd:(unit -> bool) * seq:AsyncSeq<'T> -> AsyncSeq<'T>

        /// Implements "yield" for the asyncSeq computation builder.
        member Yield : v:'T -> AsyncSeq<'T>

        /// Implements "yield!" for the asyncSeq computation builder.
        member YieldFrom : s:'U -> 'U

        /// Implements empty for the asyncSeq computation builder.
        member Zero : unit -> AsyncSeq<'T>


    /// Creates an asynchronou sequence that iterates over the given input sequence.
    /// For every input element, it calls the the specified function and iterates
    /// over all elements generated by that asynchronous sequence.
    /// This is the 'bind' operation of the computation expression (exposed using
    /// the 'for' keyword in asyncSeq computation).
    val collect : f:('T -> AsyncSeq<'TResult>) -> input:AsyncSeq<'T> -> AsyncSeq<'TResult>

    /// Builds a new asynchronous sequence whose elements are generated by 
    /// applying the specified function to all elements of the input sequence.
    ///
    /// The specified function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val mapAsync : f:('T -> Async<'TResult>) -> input:AsyncSeq<'T> -> AsyncSeq<'TResult>

    /// Asynchronously iterates over the input sequence and generates 'x' for 
    /// every input element for which the specified asynchronous function 
    /// returned 'Some(x)' 
    ///
    /// The specified function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val chooseAsync : f:('T -> Async<'R option>) -> input:AsyncSeq<'T> -> AsyncSeq<'R>

    /// Builds a new asynchronous sequence whose elements are those from the
    /// input sequence for which the specified function returned true.
    ///
    /// The specified function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val filterAsync : f:('T -> Async<bool>) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Asynchronously returns the last element that was generated by the
    /// given asynchronous sequence (or the specified default value).
    val lastOrDefault : def:'T -> input:AsyncSeq<'T> -> Async<'T>

    /// Asynchronously returns the first element that was generated by the
    /// given asynchronous sequence (or the specified default value).
    val firstOrDefault : def:'T -> input:AsyncSeq<'T> -> Async<'T>

    /// Aggregates the elements of the input asynchronous sequence using the
    /// specified 'aggregation' function. The result is an asynchronous 
    /// sequence of intermediate aggregation result.
    ///
    /// The aggregation function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val scanAsync : f:('State -> 'T -> Async<'State>) -> state:'State -> input:AsyncSeq<'T> -> AsyncSeq<'State>

    /// Iterates over the input sequence and calls the specified function for
    /// every value (to perform some side-effect asynchronously).
    ///
    /// The specified function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val iterAsync : f:('T -> Async<unit>) -> input:AsyncSeq<'T> -> Async<unit>

    /// Returns an asynchronous sequence that returns pairs containing an element
    /// from the input sequence and its predecessor. Empty sequence is returned for
    /// singleton input sequence.
    val pairwise : input:AsyncSeq<'T> -> AsyncSeq<'T * 'T>

    /// Aggregates the elements of the input asynchronous sequence using the
    /// specified 'aggregation' function. The result is an asynchronous 
    /// workflow that returns the final result.
    ///
    /// The aggregation function is asynchronous (and the input sequence will
    /// be asked for the next element after the processing of an element completes).
    val foldAsync : f:('State -> 'T -> Async<'State>) -> state:'State -> input:AsyncSeq<'T> -> Async<'State>

    /// Same as AsyncSeq.foldAsync, but the specified function is synchronous
    /// and returns the result of aggregation immediately.
    val fold : f:('State -> 'T -> 'State) -> state:'State -> input:AsyncSeq<'T> -> Async<'State>

    /// Same as AsyncSeq.scanAsync, but the specified function is synchronous
    /// and returns the result of aggregation immediately.
    val scan : f:('State -> 'T -> 'State) -> state:'State -> input:AsyncSeq<'T> -> AsyncSeq<'State>

    /// Same as AsyncSeq.mapAsync, but the specified function is synchronous
    /// and returns the result of projection immediately.
    val map : f:('T -> 'U) -> input:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Same as AsyncSeq.iterAsync, but the specified function is synchronous
    /// and performs the side-effect immediately.
    val iter : f:('T -> unit) -> input:AsyncSeq<'T> -> Async<unit>

    /// Same as AsyncSeq.chooseAsync, but the specified function is synchronous
    /// and processes the input element immediately.
    val choose : f:('T -> 'U option) -> input:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Same as AsyncSeq.filterAsync, but the specified predicate is synchronous
    /// and processes the input element immediately.
    val filter : f:('T -> bool) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Creates an asynchronous sequence that lazily takes element from an
    /// input synchronous sequence and returns them one-by-one.
    val ofSeq : input:seq<'T> -> AsyncSeq<'T>

    /// Converts observable to an asynchronous sequence. Values that are produced
    /// by the observable while the asynchronous sequence is blocked are stored to 
    /// an unbounded buffer and are returned as next elements of the async sequence.
    val ofObservableBuffered : input:System.IObservable<'T> -> AsyncSeq<'T>

    /// Converts observable to an asynchronous sequence. Values that are produced
    /// by the observable while the asynchronous sequence is blocked are discarded
    /// (this function doesn't guarantee that asynchronou ssequence will return 
    /// all values produced by the observable)
    val ofObservable : input:System.IObservable<'T> -> AsyncSeq<'T>

    /// Converts asynchronous sequence to an IObservable<_>. When the client subscribes
    /// to the observable, a new copy of asynchronous sequence is started and is 
    /// sequentially iterated over (at the maximal possible speed). Disposing of the 
    /// observer cancels the iteration over asynchronous sequence. 
    val toObservable : aseq:AsyncSeq<'T> -> System.IObservable<'T>

    /// Converts asynchronous sequence to a synchronous blocking sequence.
    /// The elements of the asynchronous sequence are consumed lazily.
    val toBlockingSeq : input:AsyncSeq<'T> -> seq<'T>

    /// Create a new asynchronous sequence that caches all elements of the 
    /// sequence specified as the input. When accessing the resulting sequence
    /// multiple times, the input will still be evaluated only once
    val cache : input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Threads a state through the mapping over an async sequence using an async function.
    val threadStateAsync : f:('State -> 'T -> Async<'U * 'State>) -> st:'State -> s:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Combines two asynchronous sequences into a sequence of pairs. 
    /// The values from sequences are retrieved in parallel. 
    /// The resulting sequence stops when either of the argument sequences stop.
    val zip : input1:AsyncSeq<'T1> -> input2:AsyncSeq<'T2> -> AsyncSeq<'T1 * 'T2>

    /// Combines two asynchronous sequences using the specified function.
    /// The values from sequences are retrieved in parallel.
    /// The resulting sequence stops when either of the argument sequences stop.
    val zipWithAsync : z:('T1 -> 'T2 -> Async<'U>) -> a:AsyncSeq<'T1> -> b:AsyncSeq<'T2> -> AsyncSeq<'U>

    /// Combines two asynchronous sequences using the specified function.
    /// The values from sequences are retrieved in parallel.
    /// The resulting sequence stops when either of the argument sequences stop.
    val inline zipWith : z:('T1 -> 'T2 -> 'U) -> a:AsyncSeq<'T1> -> b:AsyncSeq<'T2> -> AsyncSeq<'U>

    /// Combines two asynchronous sequences using the specified function to which it also passes the index.
    /// The values from sequences are retrieved in parallel.
    /// The resulting sequence stops when either of the argument sequences stop.
    val zipWithIndexAsync : f:(int -> 'T -> Async<'U>) -> s:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Feeds an async sequence of values into an async sequence of async functions.
    val inline zappAsync : fs:AsyncSeq<('T -> Async<'U>)> -> s:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Feeds an async sequence of values into an async sequence of functions.
    val inline zapp : fs:AsyncSeq<('T -> 'U)> -> s:AsyncSeq<'T> -> AsyncSeq<'U>

    /// Traverses an async sequence an applies to specified function such that if None is returned the traversal short-circuits
    /// and None is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Some.
    val traverseOptionAsync : f:('T -> Async<'U option>) -> s:AsyncSeq<'T> -> Async<AsyncSeq<'U> option>

    /// Traverses an async sequence an applies to specified function such that if Choice2Of2 is returned the traversal short-circuits
    /// and Choice2Of2 is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Choice1Of2.
    val traverseChoiceAsync : f:('T -> Async<Choice<'U,'e>>) -> s:AsyncSeq<'T> -> Async<Choice<AsyncSeq<'U>,'e>>

    /// Returns elements from an asynchronous sequence while the specified 
    /// predicate holds. The predicate is evaluated asynchronously.
    val takeWhileAsync : p:('T -> Async<bool>) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Returns elements from the argument async sequence until the specified signal completes or
    /// the sequences completes.
    val takeUntil : signal:Async<unit> -> s:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Skips elements from an asynchronous sequence while the specified 
    /// predicate holds and then returns the rest of the sequence. The 
    /// predicate is evaluated asynchronously.
    val skipWhileAsync : p:('T -> Async<bool>) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Skips elements from an async sequence until the specified signal completes.
    val skipUntil : signal:Async<unit> -> s:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Returns elements from an asynchronous sequence while the specified 
    /// predicate holds. The predicate is evaluated synchronously.
    val takeWhile : p:('T -> bool) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Skips elements from an asynchronous sequence while the specified 
    /// predicate holds and then returns the rest of the sequence. The 
    /// predicate is evaluated asynchronously.
    val skipWhile : p:('T -> bool) -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Returns the first N elements of an asynchronous sequence
    val take : count:int -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Skips the first N elements of an asynchronous sequence and
    /// then returns the rest of the sequence unmodified.
    val skip : count:int -> input:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Creates an async computation which iterates the AsyncSeq and collects the output into an array.
    val toArray : input:AsyncSeq<'T> -> Async<'T []>

    /// Creates an async computation which iterates the AsyncSeq and collects the output into a list.
    val toList : input:AsyncSeq<'T> -> Async<'T list>

    /// Flattens an AsyncSeq of sequences.
    val concatSeq : input:AsyncSeq<#seq<'T>> -> AsyncSeq<'T>

    /// Interleaves two async sequences into a resulting sequence. The provided
    /// sequences are consumed in lock-step.
    val interleave : firstSeq:AsyncSeq<'T1> -> secondSeq:AsyncSeq<'T2> -> AsyncSeq<Choice<'T1,'T2>>

    /// Buffer items from the async sequence into buffers of a specified size.
    /// The last buffer returned may be less than the specified buffer size.
    val bufferByCount : bufferSize:int -> s:AsyncSeq<'T> -> AsyncSeq<'T []>

    /// Buffers an async sequence by waiting for a the buffer to reach a certain size or for a specific 
    /// amount of time to pass.
    val bufferByCountAndTime : bufferSize:int -> timeoutMs:int -> s:AsyncSeq<'T> -> AsyncSeq<'T []>

//    /// Buffers an async sequence such that buffer boundaries are defined by the provided async
//    /// computation.
//    val bufferBy : bound:Async<unit> -> s:AsyncSeq<'T> -> AsyncSeq<'T []>

    /// Buffers an async sequence such that buffer boundaries are defined by the provided time period.
    val bufferByTime : timeoutMs:int -> s:AsyncSeq<'T> -> AsyncSeq<'T []>

    /// Merges two async sequences into an async sequence non-deterministically.
    val merge : a:AsyncSeq<'T> -> b:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Merges all specified async sequences into an async sequence non-deterministically.
    val mergeAll : ss:AsyncSeq<'T> list -> AsyncSeq<'T>

    /// Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.
    val distinctUntilChangedWithAsync : f:('T -> 'T -> Async<bool>) -> s:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.
    val distinctUntilChangedWith : f:('T -> 'T -> bool) -> s:AsyncSeq<'T> -> AsyncSeq<'T>

    /// Returns an async sequence which contains no contiguous duplicate elements.
    val distinctUntilChanged : s:AsyncSeq<'T> -> AsyncSeq<'T> when 'T : equality



/// An automatically-opened module tht contains the `asyncSeq` builder and an extension method 
[<AutoOpen>]
module AsyncSeqExtensions = 
    /// Builds an asynchronou sequence using the computation builder syntax
    val asyncSeq : AsyncSeq.AsyncSeqBuilder

    /// Converts asynchronous sequence to a synchronous blocking sequence.
    /// The elements of the asynchronous sequence are consumed lazily.
    type AsyncBuilder with
      member For : seq:AsyncSeq<'T> * action:('T -> Async<unit>) -> Async<unit>

module Seq = 
    /// Converts asynchronous sequence to a synchronous blocking sequence.
    /// The elements of the asynchronous sequence are consumed lazily.
    val ofAsyncSeq : input:AsyncSeq<'T> -> seq<'T>

