[{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control.html","title":"FSharp.Control","content":"AsyncSeq \nAsyncSeqExtensions \nAsyncSeqSrc \nSeq \nAsyncSeq\u003C\u0027T\u003E \nAsyncSeqSrc\u003C\u0027T\u003E \nIAsyncEnumerable\u003C\u0027T\u003E \nIAsyncEnumerator\u003C\u0027T\u003E"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html","title":"AsyncSeq","content":"AsyncSeq \n \nAsyncSeq.AsyncSeqBuilder \nAsyncSeqBuilder \nAsyncSeq.empty \nempty \nAsyncSeq.singleton \nsingleton \nAsyncSeq.initAsync \ninitAsync \nAsyncSeq.init \ninit \nAsyncSeq.initInfiniteAsync \ninitInfiniteAsync \nAsyncSeq.initInfinite \ninitInfinite \nAsyncSeq.unfoldAsync \nunfoldAsync \nAsyncSeq.unfold \nunfold \nAsyncSeq.replicate \nreplicate \nAsyncSeq.replicateInfinite \nreplicateInfinite \nAsyncSeq.replicateInfiniteAsync \nreplicateInfiniteAsync \nAsyncSeq.replicateUntilNoneAsync \nreplicateUntilNoneAsync \nAsyncSeq.intervalMs \nintervalMs \nAsyncSeq.append \nappend \nAsyncSeq.collect \ncollect \nAsyncSeq.mapAsync \nmapAsync \nAsyncSeq.chooseAsync \nchooseAsync \nAsyncSeq.filterAsync \nfilterAsync \nAsyncSeq.lastOrDefault \nlastOrDefault \nAsyncSeq.tryLast \ntryLast \nAsyncSeq.firstOrDefault \nfirstOrDefault \nAsyncSeq.tryFirst \ntryFirst \nAsyncSeq.scanAsync \nscanAsync \nAsyncSeq.iterAsync \niterAsync \nAsyncSeq.iteriAsync \niteriAsync \nAsyncSeq.iterAsyncParallel \niterAsyncParallel \nAsyncSeq.iterAsyncParallelThrottled \niterAsyncParallelThrottled \nAsyncSeq.pairwise \npairwise \nAsyncSeq.foldAsync \nfoldAsync \nAsyncSeq.fold \nfold \nAsyncSeq.sum \nsum \nAsyncSeq.contains \ncontains \nAsyncSeq.tryPickAsync \ntryPickAsync \nAsyncSeq.tryPick \ntryPick \nAsyncSeq.pickAsync \npickAsync \nAsyncSeq.pick \npick \nAsyncSeq.tryFind \ntryFind \nAsyncSeq.exists \nexists \nAsyncSeq.forall \nforall \nAsyncSeq.indexed \nindexed \nAsyncSeq.length \nlength \nAsyncSeq.scan \nscan \nAsyncSeq.map \nmap \nAsyncSeq.iter \niter \nAsyncSeq.choose \nchoose \nAsyncSeq.filter \nfilter \nAsyncSeq.ofSeq \nofSeq \nAsyncSeq.ofSeqAsync \nofSeqAsync \nAsyncSeq.ofObservableBuffered \nofObservableBuffered \nAsyncSeq.ofObservable \nofObservable \nAsyncSeq.toObservable \ntoObservable \nAsyncSeq.toBlockingSeq \ntoBlockingSeq \nAsyncSeq.cache \ncache \nAsyncSeq.threadStateAsync \nthreadStateAsync \nAsyncSeq.zipWithAsync \nzipWithAsync \nAsyncSeq.zipWithAsyncParallel \nzipWithAsyncParallel \nAsyncSeq.zip \nzip \nAsyncSeq.zipParallel \nzipParallel \nAsyncSeq.zipWith \nzipWith \nAsyncSeq.zipWithParallel \nzipWithParallel \nAsyncSeq.mapiAsync \nmapiAsync \nAsyncSeq.mapi \nmapi \nAsyncSeq.zipWithIndexAsync \nzipWithIndexAsync \nAsyncSeq.zappAsync \nzappAsync \nAsyncSeq.zapp \nzapp \nAsyncSeq.combineLatestWithAsync \ncombineLatestWithAsync \nAsyncSeq.combineLatestWith \ncombineLatestWith \nAsyncSeq.combineLatest \ncombineLatest \nAsyncSeq.traverseOptionAsync \ntraverseOptionAsync \nAsyncSeq.traverseChoiceAsync \ntraverseChoiceAsync \nAsyncSeq.takeWhileAsync \ntakeWhileAsync \nAsyncSeq.takeUntilSignal \ntakeUntilSignal \nAsyncSeq.takeUntil \ntakeUntil \nAsyncSeq.skipWhileAsync \nskipWhileAsync \nAsyncSeq.skipUntilSignal \nskipUntilSignal \nAsyncSeq.skipUntil \nskipUntil \nAsyncSeq.takeWhile \ntakeWhile \nAsyncSeq.takeWhileInclusive \ntakeWhileInclusive \nAsyncSeq.skipWhile \nskipWhile \nAsyncSeq.take \ntake \nAsyncSeq.truncate \ntruncate \nAsyncSeq.skip \nskip \nAsyncSeq.toArrayAsync \ntoArrayAsync \nAsyncSeq.toListAsync \ntoListAsync \nAsyncSeq.toListSynchronously \ntoListSynchronously \nAsyncSeq.toArraySynchronously \ntoArraySynchronously \nAsyncSeq.concatSeq \nconcatSeq \nAsyncSeq.concat \nconcat \nAsyncSeq.sort \nsort \nAsyncSeq.sortBy \nsortBy \nAsyncSeq.sortDescending \nsortDescending \nAsyncSeq.sortByDescending \nsortByDescending \nAsyncSeq.interleave \ninterleave \nAsyncSeq.interleaveChoice \ninterleaveChoice \nAsyncSeq.bufferByCount \nbufferByCount \nAsyncSeq.bufferByCountAndTime \nbufferByCountAndTime \nAsyncSeq.bufferByTime \nbufferByTime \nAsyncSeq.mergeChoice \nmergeChoice \nAsyncSeq.merge \nmerge \nAsyncSeq.mergeAll \nmergeAll \nAsyncSeq.distinctUntilChangedWithAsync \ndistinctUntilChangedWithAsync \nAsyncSeq.distinctUntilChangedWith \ndistinctUntilChangedWith \nAsyncSeq.distinctUntilChanged \ndistinctUntilChanged \nAsyncSeq.getIterator \ngetIterator \nAsyncSeq.mapAsyncParallel \nmapAsyncParallel \nAsyncSeq.groupByAsync \ngroupByAsync \nAsyncSeq.groupBy \ngroupBy \nAsyncSeq.ofAsyncEnum \nofAsyncEnum \nAsyncSeq.toAsyncEnum \ntoAsyncEnum \nAsyncSeq.ofIQueryable \nofIQueryable"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#empty","title":"AsyncSeq.empty","content":"AsyncSeq.empty \nempty \n\n Creates an empty asynchronous sequence that immediately ends.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#singleton","title":"AsyncSeq.singleton","content":"AsyncSeq.singleton \nsingleton \n\n Creates an asynchronous sequence that generates a single element and then ends.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#initAsync","title":"AsyncSeq.initAsync","content":"AsyncSeq.initAsync \ninitAsync \n\n Generates a finite async sequence using the specified asynchronous initialization function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#init","title":"AsyncSeq.init","content":"AsyncSeq.init \ninit \n\n Generates a finite async sequence using the specified initialization function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#initInfiniteAsync","title":"AsyncSeq.initInfiniteAsync","content":"AsyncSeq.initInfiniteAsync \ninitInfiniteAsync \n\n Generates an infinite async sequence using the specified asynchronous initialization function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#initInfinite","title":"AsyncSeq.initInfinite","content":"AsyncSeq.initInfinite \ninitInfinite \n\n Generates an infinite async sequence using the specified initialization function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#unfoldAsync","title":"AsyncSeq.unfoldAsync","content":"AsyncSeq.unfoldAsync \nunfoldAsync \n\n Generates an async sequence using the specified asynchronous generator function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#unfold","title":"AsyncSeq.unfold","content":"AsyncSeq.unfold \nunfold \n\n Generates an async sequence using the specified generator function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#replicate","title":"AsyncSeq.replicate","content":"AsyncSeq.replicate \nreplicate \n\n Creates an async sequence which repeats the specified value the indicated number of times.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#replicateInfinite","title":"AsyncSeq.replicateInfinite","content":"AsyncSeq.replicateInfinite \nreplicateInfinite \n\n Creates an infinite async sequence which repeats the specified value.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#replicateInfiniteAsync","title":"AsyncSeq.replicateInfiniteAsync","content":"AsyncSeq.replicateInfiniteAsync \nreplicateInfiniteAsync \n\n Creates an infinite async sequence which repeatedly evaluates and emits the specified async value.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#replicateUntilNoneAsync","title":"AsyncSeq.replicateUntilNoneAsync","content":"AsyncSeq.replicateUntilNoneAsync \nreplicateUntilNoneAsync \n\n Creates an async sequence given by evaluating the specified async computation until it returns None.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#intervalMs","title":"AsyncSeq.intervalMs","content":"AsyncSeq.intervalMs \nintervalMs \n\n Returns an async sequence which emits an element on a specified period.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#append","title":"AsyncSeq.append","content":"AsyncSeq.append \nappend \n\n Yields all elements of the first asynchronous sequence and then\n all elements of the second asynchronous sequence.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#collect","title":"AsyncSeq.collect","content":"AsyncSeq.collect \ncollect \n\n Creates an asynchronous sequence that iterates over the given input sequence.\n For every input element, it calls the the specified function and iterates\n over all elements generated by that asynchronous sequence.\n This is the \u0027bind\u0027 operation of the computation expression (exposed using\n the \u0027for\u0027 keyword in asyncSeq computation).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mapAsync","title":"AsyncSeq.mapAsync","content":"AsyncSeq.mapAsync \nmapAsync \n\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#chooseAsync","title":"AsyncSeq.chooseAsync","content":"AsyncSeq.chooseAsync \nchooseAsync \n\n Asynchronously iterates over the input sequence and generates \u0027x\u0027 for\n every input element for which the specified asynchronous function\n returned \u0027Some(x)\u0027\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#filterAsync","title":"AsyncSeq.filterAsync","content":"AsyncSeq.filterAsync \nfilterAsync \n\n Builds a new asynchronous sequence whose elements are those from the\n input sequence for which the specified function returned true.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#lastOrDefault","title":"AsyncSeq.lastOrDefault","content":"AsyncSeq.lastOrDefault \nlastOrDefault \n\n Asynchronously returns the last element that was generated by the\n given asynchronous sequence (or the specified default value).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#tryLast","title":"AsyncSeq.tryLast","content":"AsyncSeq.tryLast \ntryLast \n\n Asynchronously returns the last element that was generated by the\n given asynchronous sequence (or None if the sequence is empty).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#firstOrDefault","title":"AsyncSeq.firstOrDefault","content":"AsyncSeq.firstOrDefault \nfirstOrDefault \n\n Asynchronously returns the first element that was generated by the\n given asynchronous sequence (or the specified default value).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#tryFirst","title":"AsyncSeq.tryFirst","content":"AsyncSeq.tryFirst \ntryFirst \n\n Asynchronously returns the first element that was generated by the\n given asynchronous sequence (or None if the sequence is empty).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#scanAsync","title":"AsyncSeq.scanAsync","content":"AsyncSeq.scanAsync \nscanAsync \n\n Aggregates the elements of the input asynchronous sequence using the\n specified \u0027aggregation\u0027 function. The result is an asynchronous\n sequence of intermediate aggregation result.\n\n The aggregation function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#iterAsync","title":"AsyncSeq.iterAsync","content":"AsyncSeq.iterAsync \niterAsync \n\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. The input sequence will be asked for the next element after\n the processing of an element completes.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#iteriAsync","title":"AsyncSeq.iteriAsync","content":"AsyncSeq.iteriAsync \niteriAsync \n\n Iterates over the input sequence and calls the specified asynchronous function for\n every value, passing along the index of that element.\n The input sequence will be asked for the next element after the processing of an element completes.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#iterAsyncParallel","title":"AsyncSeq.iterAsyncParallel","content":"AsyncSeq.iterAsyncParallel \niterAsyncParallel \n\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. Each action computation is started but not awaited before consuming\n the next item from the sequence, thereby iterating in parallel.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#iterAsyncParallelThrottled","title":"AsyncSeq.iterAsyncParallelThrottled","content":"AsyncSeq.iterAsyncParallelThrottled \niterAsyncParallelThrottled \n\n Iterates over the input sequence and calls the specified asynchronous function for\n every value. Each action computation is started but not awaited before consuming\n the next item from the sequence, thereby iterating in parallel with a specified degree of parallelism.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#pairwise","title":"AsyncSeq.pairwise","content":"AsyncSeq.pairwise \npairwise \n\n Returns an asynchronous sequence that returns pairs containing an element\n from the input sequence and its predecessor. Empty sequence is returned for\n singleton input sequence.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#foldAsync","title":"AsyncSeq.foldAsync","content":"AsyncSeq.foldAsync \nfoldAsync \n\n Asynchronously aggregate the elements of the input asynchronous sequence using the\n specified asynchronous \u0027aggregation\u0027 function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#fold","title":"AsyncSeq.fold","content":"AsyncSeq.fold \nfold \n\n Asynchronously aggregate the elements of the input asynchronous sequence using the\n specified \u0027aggregation\u0027 function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#sum","title":"AsyncSeq.sum","content":"AsyncSeq.sum \nsum \n\n Asynchronously sum the elements of the input asynchronous sequence using the specified function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#contains","title":"AsyncSeq.contains","content":"AsyncSeq.contains \ncontains \n\n Asynchronously determine if the sequence contains the given value\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#tryPickAsync","title":"AsyncSeq.tryPickAsync","content":"AsyncSeq.tryPickAsync \ntryPickAsync \n\n Asynchronously pick a value from a sequence based on the specified chooser function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#tryPick","title":"AsyncSeq.tryPick","content":"AsyncSeq.tryPick \ntryPick \n\n Asynchronously pick a value from a sequence based on the specified chooser function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#pickAsync","title":"AsyncSeq.pickAsync","content":"AsyncSeq.pickAsync \npickAsync \n\n Asynchronously pick a value from a sequence based on the specified chooser function.\n Raises KeyNotFoundException if the chooser function can\u0027t find a matching key.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#pick","title":"AsyncSeq.pick","content":"AsyncSeq.pick \npick \n\n Asynchronously pick a value from a sequence based on the specified chooser function.\n Raises KeyNotFoundException if the chooser function can\u0027t find a matching key.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#tryFind","title":"AsyncSeq.tryFind","content":"AsyncSeq.tryFind \ntryFind \n\n Asynchronously find the first value in a sequence for which the predicate returns true\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#exists","title":"AsyncSeq.exists","content":"AsyncSeq.exists \nexists \n\n Asynchronously determine if there is a value in the sequence for which the predicate returns true\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#forall","title":"AsyncSeq.forall","content":"AsyncSeq.forall \nforall \n\n Asynchronously determine if the predicate returns true for all values in the sequence\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#indexed","title":"AsyncSeq.indexed","content":"AsyncSeq.indexed \nindexed \n\n Return an asynchronous sequence which, when iterated, includes an integer indicating the index of each element in the sequence.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#length","title":"AsyncSeq.length","content":"AsyncSeq.length \nlength \n\n Asynchronously determine the number of elements in the sequence\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#scan","title":"AsyncSeq.scan","content":"AsyncSeq.scan \nscan \n\n Same as AsyncSeq.scanAsync, but the specified function is synchronous.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#map","title":"AsyncSeq.map","content":"AsyncSeq.map \nmap \n\n Same as AsyncSeq.mapAsync, but the specified function is synchronous.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#iter","title":"AsyncSeq.iter","content":"AsyncSeq.iter \niter \n\n Iterates over the input sequence and calls the specified function for\n every value.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#choose","title":"AsyncSeq.choose","content":"AsyncSeq.choose \nchoose \n\n Asynchronously iterates over the input sequence and generates \u0027x\u0027 for\n every input element for which the specified function\n returned \u0027Some(x)\u0027\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#filter","title":"AsyncSeq.filter","content":"AsyncSeq.filter \nfilter \n\n Same as AsyncSeq.filterAsync, but the specified predicate is synchronous\n and processes the input element immediately.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofSeq","title":"AsyncSeq.ofSeq","content":"AsyncSeq.ofSeq \nofSeq \n\n Creates an asynchronous sequence that lazily takes element from an\n input synchronous sequence and returns them one-by-one.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofSeqAsync","title":"AsyncSeq.ofSeqAsync","content":"AsyncSeq.ofSeqAsync \nofSeqAsync \n\n Creates an asynchronous sequence that lazily takes element from an\n input synchronous sequence of asynchronous computation and returns them one-by-one.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofObservableBuffered","title":"AsyncSeq.ofObservableBuffered","content":"AsyncSeq.ofObservableBuffered \nofObservableBuffered \n\n Converts observable to an asynchronous sequence. Values that are produced\n by the observable while the asynchronous sequence is blocked are stored to\n an unbounded buffer and are returned as next elements of the async sequence.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofObservable","title":"AsyncSeq.ofObservable","content":"AsyncSeq.ofObservable \nofObservable \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toObservable","title":"AsyncSeq.toObservable","content":"AsyncSeq.toObservable \ntoObservable \n\n Converts asynchronous sequence to an IObservable\u003C_\u003E. When the client subscribes\n to the observable, a new copy of asynchronous sequence is started and is\n sequentially iterated over (at the maximal possible speed). Disposing of the\n observer cancels the iteration over asynchronous sequence.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toBlockingSeq","title":"AsyncSeq.toBlockingSeq","content":"AsyncSeq.toBlockingSeq \ntoBlockingSeq \n\n Converts asynchronous sequence to a synchronous blocking sequence.\n The elements of the asynchronous sequence are consumed lazily.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#cache","title":"AsyncSeq.cache","content":"AsyncSeq.cache \ncache \n\n Create a new asynchronous sequence that caches all elements of the\n sequence specified as the input. When accessing the resulting sequence\n multiple times, the input will still be evaluated only once\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#threadStateAsync","title":"AsyncSeq.threadStateAsync","content":"AsyncSeq.threadStateAsync \nthreadStateAsync \n\n Threads a state through the mapping over an async sequence using an async function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipWithAsync","title":"AsyncSeq.zipWithAsync","content":"AsyncSeq.zipWithAsync \nzipWithAsync \n\n Combines two asynchronous sequences using the specified function.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipWithAsyncParallel","title":"AsyncSeq.zipWithAsyncParallel","content":"AsyncSeq.zipWithAsyncParallel \nzipWithAsyncParallel \n\n Combines two asynchronous sequences using the specified function.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zip","title":"AsyncSeq.zip","content":"AsyncSeq.zip \nzip \n\n Combines two asynchronous sequences into a sequence of pairs.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipParallel","title":"AsyncSeq.zipParallel","content":"AsyncSeq.zipParallel \nzipParallel \n\n Combines two asynchronous sequences into a sequence of pairs.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipWith","title":"AsyncSeq.zipWith","content":"AsyncSeq.zipWith \nzipWith \n\n Combines two asynchronous sequences using the specified function.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipWithParallel","title":"AsyncSeq.zipWithParallel","content":"AsyncSeq.zipWithParallel \nzipWithParallel \n\n Combines two asynchronous sequences using the specified function.\n The values from sequences are retrieved in parallel.\n The resulting sequence stops when either of the argument sequences stop.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mapiAsync","title":"AsyncSeq.mapiAsync","content":"AsyncSeq.mapiAsync \nmapiAsync \n\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is asynchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mapi","title":"AsyncSeq.mapi","content":"AsyncSeq.mapi \nmapi \n\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The specified function is synchronous (and the input sequence will\n be asked for the next element after the processing of an element completes).\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zipWithIndexAsync","title":"AsyncSeq.zipWithIndexAsync","content":"AsyncSeq.zipWithIndexAsync \nzipWithIndexAsync \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zappAsync","title":"AsyncSeq.zappAsync","content":"AsyncSeq.zappAsync \nzappAsync \n\n Feeds an async sequence of values into an async sequence of async functions.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#zapp","title":"AsyncSeq.zapp","content":"AsyncSeq.zapp \nzapp \n\n Feeds an async sequence of values into an async sequence of functions.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#combineLatestWithAsync","title":"AsyncSeq.combineLatestWithAsync","content":"AsyncSeq.combineLatestWithAsync \ncombineLatestWithAsync \n\n Merges two async sequences using the specified combine function. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#combineLatestWith","title":"AsyncSeq.combineLatestWith","content":"AsyncSeq.combineLatestWith \ncombineLatestWith \n\n Merges two async sequences using the specified combine function. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#combineLatest","title":"AsyncSeq.combineLatest","content":"AsyncSeq.combineLatest \ncombineLatest \n\n Merges two async sequences. The resulting async sequence produces an element when either\n input sequence produces an element, passing the new element from the emitting sequence and the previously emitted element from the other sequence.\n If either of the input sequences is empty, the resulting sequence is empty.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#traverseOptionAsync","title":"AsyncSeq.traverseOptionAsync","content":"AsyncSeq.traverseOptionAsync \ntraverseOptionAsync \n\n Traverses an async sequence an applies to specified function such that if None is returned the traversal short-circuits\n and None is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Some.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#traverseChoiceAsync","title":"AsyncSeq.traverseChoiceAsync","content":"AsyncSeq.traverseChoiceAsync \ntraverseChoiceAsync \n\n Traverses an async sequence an applies to specified function such that if Choice2Of2 is returned the traversal short-circuits\n and Choice2Of2 is returned as the result. Otherwise, the entire sequence is traversed and the result returned as Choice1Of2.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#takeWhileAsync","title":"AsyncSeq.takeWhileAsync","content":"AsyncSeq.takeWhileAsync \ntakeWhileAsync \n\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated asynchronously.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#takeUntilSignal","title":"AsyncSeq.takeUntilSignal","content":"AsyncSeq.takeUntilSignal \ntakeUntilSignal \n\n Returns elements from the argument async sequence until the specified signal completes or\n the sequences completes.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#takeUntil","title":"AsyncSeq.takeUntil","content":"AsyncSeq.takeUntil \ntakeUntil \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#skipWhileAsync","title":"AsyncSeq.skipWhileAsync","content":"AsyncSeq.skipWhileAsync \nskipWhileAsync \n\n Skips elements from an asynchronous sequence while the specified\n predicate holds and then returns the rest of the sequence. The\n predicate is evaluated asynchronously.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#skipUntilSignal","title":"AsyncSeq.skipUntilSignal","content":"AsyncSeq.skipUntilSignal \nskipUntilSignal \n\n Skips elements from an async sequence until the specified signal completes.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#skipUntil","title":"AsyncSeq.skipUntil","content":"AsyncSeq.skipUntil \nskipUntil \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#takeWhile","title":"AsyncSeq.takeWhile","content":"AsyncSeq.takeWhile \ntakeWhile \n\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated synchronously.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#takeWhileInclusive","title":"AsyncSeq.takeWhileInclusive","content":"AsyncSeq.takeWhileInclusive \ntakeWhileInclusive \n\n Returns elements from an asynchronous sequence while the specified\n predicate holds. The predicate is evaluated synchronously.\n Does return the first element that predicate fails\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#skipWhile","title":"AsyncSeq.skipWhile","content":"AsyncSeq.skipWhile \nskipWhile \n\n Skips elements from an asynchronous sequence while the specified\n predicate holds and then returns the rest of the sequence. The\n predicate is evaluated asynchronously.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#take","title":"AsyncSeq.take","content":"AsyncSeq.take \ntake \n\n Returns the first N elements of an asynchronous sequence\n does not cast an exception if count is larger than the sequence length.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#truncate","title":"AsyncSeq.truncate","content":"AsyncSeq.truncate \ntruncate \n\n Alias for take\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#skip","title":"AsyncSeq.skip","content":"AsyncSeq.skip \nskip \n\n Skips the first N elements of an asynchronous sequence and\n then returns the rest of the sequence unmodified.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toArrayAsync","title":"AsyncSeq.toArrayAsync","content":"AsyncSeq.toArrayAsync \ntoArrayAsync \n\n Creates an async computation which iterates the AsyncSeq and collects the output into an array.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toListAsync","title":"AsyncSeq.toListAsync","content":"AsyncSeq.toListAsync \ntoListAsync \n\n Creates an async computation which iterates the AsyncSeq and collects the output into a list.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toListSynchronously","title":"AsyncSeq.toListSynchronously","content":"AsyncSeq.toListSynchronously \ntoListSynchronously \n\n Synchronously iterates the AsyncSeq and collects the output into a list.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toArraySynchronously","title":"AsyncSeq.toArraySynchronously","content":"AsyncSeq.toArraySynchronously \ntoArraySynchronously \n\n Synchronously iterates the AsyncSeq and collects the output into an array.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#concatSeq","title":"AsyncSeq.concatSeq","content":"AsyncSeq.concatSeq \nconcatSeq \n\n Flattens an AsyncSeq of synchronous sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#concat","title":"AsyncSeq.concat","content":"AsyncSeq.concat \nconcat \n\n Flattens an AsyncSeq of asynchronous sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#sort","title":"AsyncSeq.sort","content":"AsyncSeq.sort \nsort \n\n Yields a sequence ordered by keys.\n This function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#sortBy","title":"AsyncSeq.sortBy","content":"AsyncSeq.sortBy \nsortBy \n\n Applies a key-generating function to each element of an AsyncSeq and yield an array ordered by keys.\n This function returns an array that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#sortDescending","title":"AsyncSeq.sortDescending","content":"AsyncSeq.sortDescending \nsortDescending \n\n Yields an array ordered descending by keys.\n This function returns an array that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#sortByDescending","title":"AsyncSeq.sortByDescending","content":"AsyncSeq.sortByDescending \nsortByDescending \n\n Applies a key-generating function to each element of an AsyncSeq and yield an array ordered descending by keys.\n This function returns an array that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#interleave","title":"AsyncSeq.interleave","content":"AsyncSeq.interleave \ninterleave \n\n Interleaves two async sequences of the same type into a resulting sequence. The provided\n sequences are consumed in lock-step.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#interleaveChoice","title":"AsyncSeq.interleaveChoice","content":"AsyncSeq.interleaveChoice \ninterleaveChoice \n\n Interleaves two async sequences into a resulting sequence. The provided\n sequences are consumed in lock-step.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#bufferByCount","title":"AsyncSeq.bufferByCount","content":"AsyncSeq.bufferByCount \nbufferByCount \n\n Buffer items from the async sequence into buffers of a specified size.\n The last buffer returned may be less than the specified buffer size.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#bufferByCountAndTime","title":"AsyncSeq.bufferByCountAndTime","content":"AsyncSeq.bufferByCountAndTime \nbufferByCountAndTime \n\n Buffer items from the async sequence until a specified buffer size is reached or a specified amount of time is elapsed.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#bufferByTime","title":"AsyncSeq.bufferByTime","content":"AsyncSeq.bufferByTime \nbufferByTime \n\n Buffers items from the async sequence by the specified time interval.\n If no items are received in an intervel and empty array is emitted.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mergeChoice","title":"AsyncSeq.mergeChoice","content":"AsyncSeq.mergeChoice \nmergeChoice \n\n Merges two async sequences into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#merge","title":"AsyncSeq.merge","content":"AsyncSeq.merge \nmerge \n\n Merges two async sequences of the same type into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mergeAll","title":"AsyncSeq.mergeAll","content":"AsyncSeq.mergeAll \nmergeAll \n\n Merges all specified async sequences into an async sequence non-deterministically.\n The resulting async sequence produces elements when any argument sequence produces an element.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#distinctUntilChangedWithAsync","title":"AsyncSeq.distinctUntilChangedWithAsync","content":"AsyncSeq.distinctUntilChangedWithAsync \ndistinctUntilChangedWithAsync \n\n Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#distinctUntilChangedWith","title":"AsyncSeq.distinctUntilChangedWith","content":"AsyncSeq.distinctUntilChangedWith \ndistinctUntilChangedWith \n\n Returns an async sequence which contains no contiguous duplicate elements based on the specified comparison function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#distinctUntilChanged","title":"AsyncSeq.distinctUntilChanged","content":"AsyncSeq.distinctUntilChanged \ndistinctUntilChanged \n\n Returns an async sequence which contains no contiguous duplicate elements.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#getIterator","title":"AsyncSeq.getIterator","content":"AsyncSeq.getIterator \ngetIterator \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#mapAsyncParallel","title":"AsyncSeq.mapAsyncParallel","content":"AsyncSeq.mapAsyncParallel \nmapAsyncParallel \n\n Builds a new asynchronous sequence whose elements are generated by\n applying the specified function to all elements of the input sequence.\n\n The function is applied to elements in order and results are emitted in order,\n but in parallel, without waiting for a prior mapping operation to complete.\n Parallelism is bound by the ThreadPool.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#groupByAsync","title":"AsyncSeq.groupByAsync","content":"AsyncSeq.groupByAsync \ngroupByAsync \n\n Applies a key-generating function to each element and returns an async sequence containing unique keys\n and async sequences containing elements corresponding to the key.\n\n Note that the resulting async sequence has to be processed in parallel (e.g AsyncSeq.mapAsyncParallel) becaused\n completion of sub-sequences depends on completion of other sub-sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#groupBy","title":"AsyncSeq.groupBy","content":"AsyncSeq.groupBy \ngroupBy \n\n Applies a key-generating function to each element and returns an async sequence containing unique keys\n and async sequences containing elements corresponding to the key.\n\n Note that the resulting async sequence has to be processed in parallel (e.g AsyncSeq.mapAsyncParallel) becaused\n completion of sub-sequences depends on completion of other sub-sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofAsyncEnum","title":"AsyncSeq.ofAsyncEnum","content":"AsyncSeq.ofAsyncEnum \nofAsyncEnum \n\n Creates an asynchronous computation that asynchronously yields results from the provided .NET IAsyncEnumerable.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#toAsyncEnum","title":"AsyncSeq.toAsyncEnum","content":"AsyncSeq.toAsyncEnum \ntoAsyncEnum \n\n Creates an .NET IAsyncEnumerable from the provided AsyncSeq computation.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq.html#ofIQueryable","title":"AsyncSeq.ofIQueryable","content":"AsyncSeq.ofIQueryable \nofIQueryable \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html","title":"AsyncSeqBuilder","content":"AsyncSeqBuilder \n\n Computation builder that allows creating of asynchronous\n sequences using the \u0027asyncSeq { ... }\u0027 syntax\n \nAsyncSeqBuilder.( .ctor ) \n( .ctor ) \nAsyncSeqBuilder.Bind \nBind \nAsyncSeqBuilder.Combine \nCombine \nAsyncSeqBuilder.Delay \nDelay \nAsyncSeqBuilder.For \nFor \nAsyncSeqBuilder.For \nFor \nAsyncSeqBuilder.TryFinally \nTryFinally \nAsyncSeqBuilder.TryWith \nTryWith \nAsyncSeqBuilder.Using \nUsing \nAsyncSeqBuilder.While \nWhile \nAsyncSeqBuilder.Yield \nYield \nAsyncSeqBuilder.YieldFrom \nYieldFrom \nAsyncSeqBuilder.Zero \nZero"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#( .ctor )","title":"AsyncSeqBuilder.( .ctor )","content":"AsyncSeqBuilder.( .ctor ) \n( .ctor ) \n\n Internal use only\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Bind","title":"AsyncSeqBuilder.Bind","content":"AsyncSeqBuilder.Bind \nBind \n\n Implements binding for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Combine","title":"AsyncSeqBuilder.Combine","content":"AsyncSeqBuilder.Combine \nCombine \n\n Implements sequential composition for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Delay","title":"AsyncSeqBuilder.Delay","content":"AsyncSeqBuilder.Delay \nDelay \n\n Implements delay for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#For","title":"AsyncSeqBuilder.For","content":"AsyncSeqBuilder.For \nFor \n\n Implements \u0022for\u0022 loops for the asyncSeq computation builder.\n\n Asynchronous for loop - for all elements from the input sequence,\n generate all elements produced by the body (asynchronously). See\n also the AsyncSeq.collect function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#For","title":"AsyncSeqBuilder.For","content":"AsyncSeqBuilder.For \nFor \n\n For loop that iterates over a synchronous sequence (and generates\n all elements generated by the asynchronous body)\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#TryFinally","title":"AsyncSeqBuilder.TryFinally","content":"AsyncSeqBuilder.TryFinally \nTryFinally \n\n Implements \u0022try-finally\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#TryWith","title":"AsyncSeqBuilder.TryWith","content":"AsyncSeqBuilder.TryWith \nTryWith \n\n Implements \u0022try-with\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Using","title":"AsyncSeqBuilder.Using","content":"AsyncSeqBuilder.Using \nUsing \n\n Implements \u0022use\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#While","title":"AsyncSeqBuilder.While","content":"AsyncSeqBuilder.While \nWhile \n\n Implements \u0022while\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Yield","title":"AsyncSeqBuilder.Yield","content":"AsyncSeqBuilder.Yield \nYield \n\n Implements \u0022yield\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#YieldFrom","title":"AsyncSeqBuilder.YieldFrom","content":"AsyncSeqBuilder.YieldFrom \nYieldFrom \n\n Implements \u0022yield!\u0022 for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-asyncseqbuilder.html#Zero","title":"AsyncSeqBuilder.Zero","content":"AsyncSeqBuilder.Zero \nZero \n\n Implements empty for the asyncSeq computation builder.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqextensions.html","title":"AsyncSeqExtensions","content":"AsyncSeqExtensions \n\n An automatically-opened module that contains the \u0060asyncSeq\u0060 builder and an extension method\n \nAsyncSeqExtensions.asyncSeq \nasyncSeq \nAsyncSeqExtensions.For \nFor"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqextensions.html#asyncSeq","title":"AsyncSeqExtensions.asyncSeq","content":"AsyncSeqExtensions.asyncSeq \nasyncSeq \n\n Builds an asynchronous sequence using the computation builder syntax\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqextensions.html#For","title":"AsyncSeqExtensions.For","content":"AsyncSeqExtensions.For \nFor \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html","title":"AsyncSeqSrc","content":"AsyncSeqSrc \n\n Operations on async sequence sources.\n \nAsyncSeqSrc.create \ncreate \nAsyncSeqSrc.put \nput \nAsyncSeqSrc.close \nclose \nAsyncSeqSrc.error \nerror \nAsyncSeqSrc.toAsyncSeq \ntoAsyncSeq"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html#create","title":"AsyncSeqSrc.create","content":"AsyncSeqSrc.create \ncreate \n\n Creates a new async sequence source.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html#put","title":"AsyncSeqSrc.put","content":"AsyncSeqSrc.put \nput \n\n Causes any async sequences created before the call to yield the item.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html#close","title":"AsyncSeqSrc.close","content":"AsyncSeqSrc.close \nclose \n\n Closes the async sequence source casuing any created async sequences to complete.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html#error","title":"AsyncSeqSrc.error","content":"AsyncSeqSrc.error \nerror \n\n Causes async sequence created before the call to raise an exception.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc.html#toAsyncSeq","title":"AsyncSeqSrc.toAsyncSeq","content":"AsyncSeqSrc.toAsyncSeq \ntoAsyncSeq \n\n Creates an async sequence which yields values as they are put into the source and terminates\n when the source is closed. This sequence will yield items starting with the next put.\n Many async sequences can be created from once source.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-seq.html","title":"Seq","content":"Seq \n \nSeq.ofAsyncSeq \nofAsyncSeq"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-seq.html#ofAsyncSeq","title":"Seq.ofAsyncSeq","content":"Seq.ofAsyncSeq \nofAsyncSeq \n\n Converts asynchronous sequence to a synchronous blocking sequence.\n The elements of the asynchronous sequence are consumed lazily.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseq-1.html","title":"AsyncSeq\u003C\u0027T\u003E","content":"AsyncSeq\u003C\u0027T\u003E \n\n An asynchronous sequence represents a delayed computation that can be\n started to give an enumerator for pulling results asynchronously\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-asyncseqsrc-1.html","title":"AsyncSeqSrc\u003C\u0027T\u003E","content":"AsyncSeqSrc\u003C\u0027T\u003E \n\n An async sequence source produces async sequences.\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-iasyncenumerable-1.html","title":"IAsyncEnumerable\u003C\u0027T\u003E","content":"IAsyncEnumerable\u003C\u0027T\u003E \n\n An asynchronous sequence represents a delayed computation that can be\n started to give an enumerator for pulling results asynchronously\n \nIAsyncEnumerable\u003C\u0027T\u003E.GetEnumerator \nGetEnumerator"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-iasyncenumerable-1.html#GetEnumerator","title":"IAsyncEnumerable\u003C\u0027T\u003E.GetEnumerator","content":"IAsyncEnumerable\u003C\u0027T\u003E.GetEnumerator \nGetEnumerator \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-iasyncenumerator-1.html","title":"IAsyncEnumerator\u003C\u0027T\u003E","content":"IAsyncEnumerator\u003C\u0027T\u003E \n\n An enumerator for pulling results asynchronously\n \nIAsyncEnumerator\u003C\u0027T\u003E.MoveNext \nMoveNext"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/reference/fsharp-control-iasyncenumerator-1.html#MoveNext","title":"IAsyncEnumerator\u003C\u0027T\u003E.MoveNext","content":"IAsyncEnumerator\u003C\u0027T\u003E.MoveNext \nMoveNext \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/ComparisonWithObservable.html","title":"Comparison with IObservable\n","content":"(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Control.AsyncSeq/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Control.AsyncSeq.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fsprojects/FSharp.Control.AsyncSeq/gh-pages?filepath=AsyncSeq.ipynb)\n\n# Comparison with IObservable\n\nBoth \u0060IObservable\u003C\u0027T\u003E\u0060 and \u0060AsyncSeq\u003C\u0027T\u003E\u0060 represent collections of items and both provide similar operations\nfor transformation and composition. The central difference between the two is that the former uses a *synchronous push*\nto a subscriber and the latter uses an *asynchronous pull* by a consumer. \nConsumers of an \u0060IObservable\u003C\u0027T\u003E\u0060 *subscribe* to receive notifications about\nnew items or the end of the sequence. By contrast, consumers of an \u0060AsyncSeq\u003C\u0027T\u003E\u0060 *asynchronously retrieve* subsequent items on their own\nterms. Some domains are more naturally modeled with one or the other, however it is less clear which is a more\nsuitable tool for a specific task. In many cases, a combination of the two provides the optimal solution and \nrestricting yourself to one, while simplifying the programming model, can lead one to view all problems as a nail.\n\nA more specific difference between the two is that \u0060IObservable\u003C\u0027T\u003E\u0060 subscribers have the basic type \u0060\u0027T -\u003E unit\u0060 \nand are therefore inherently synchronous and imperative. The observer can certainly make a blocking call, but this \ncan defeat the purpose of the observable sequence all together. Alternatively, the observer can spawn an operation, but\nthis can break composition because one can no longer rely on the observer returning to determine that it has \ncompleted. With the observable model however, we can model blocking operations through composition on sequences rather\nthan observers.\n\nTo illustrate, let\u0027s try to implement the above Tweet retrieval, filtering and storage workflow using observable sequences.\nSuppose we already have an observable sequence representing tweets \u0060IObservable\u003CTweet\u003E\u0060 and we simply wish \nto filter it and store the resulting tweets. The function \u0060Observable.filter\u0060 allows one to filter observable\nsequences based on a predicate, however in this case it doesn\u0027t quite cut it because the predicate passed to it must\nbe synchronous \u0060\u0027T -\u003E bool\u0060:\n*)\n\nopen System\n\nlet tweetsObs : IObservable\u003CTweet\u003E =\n  failwith \u0022TODO: create observable\u0022\n\nlet filteredTweetsObs =\n  tweetsObs\n  |\u003E Observable.filter (filterTweet \u003E\u003E Async.RunSynchronously) // blocking IO-call!\n\n(**\nTo remedy the blocking IO-call we can better adapt the filtering function to the \u0060IObservable\u003C\u0027T\u003E\u0060 model. A value\nof type \u0060Async\u003C\u0027T\u003E\u0060 can be modeled as an \u0060IObservable\u003C\u0027T\u003E\u0060 with one element. Suppose that we have \n\u0060Tweet -\u003E IObservable\u003Cbool\u003E\u0060. We can define a few helper operators on observables to allow filtering using\nan asynchronous predicate as follows:\n*)\n\nmodule Observable =\n  \n  /// a |\u003E Async.StartAsTask |\u003E (fun t -\u003E t.ToObservable())\n  let ofAsync (a:Async\u003C\u0027a\u003E) : IObservable\u003C\u0027a\u003E =\n    failwith \u0022TODO\u0022\n\n  /// Observable.SelectMany\n  let bind (f:\u0027a -\u003E IObservable\u003C\u0027b\u003E) (o:IObservable\u003C\u0027a\u003E) : IObservable\u003C\u0027b\u003E =\n    failwith \u0022TODO\u0022\n\n  /// Filter an observable sequence using a predicate producing a observable\n  /// which emits a single boolean value.\n  let filterObs (f:\u0027a -\u003E IObservable\u003Cbool\u003E) : IObservable\u003C\u0027a\u003E -\u003E IObservable\u003C\u0027a\u003E =\n    bind \u003C| fun a -\u003E \n      f a\n      |\u003E Observable.choose (function\n        | true -\u003E Some a\n        | false -\u003E None\n      )\n  \n  /// Filter an observable sequence using a predicate which returns an async\n  /// computation producing a boolean value.\n  let filterAsync (f:\u0027a -\u003E Async\u003Cbool\u003E) : IObservable\u003C\u0027a\u003E -\u003E IObservable\u003C\u0027a\u003E =\n    filterObs (f \u003E\u003E ofAsync)\n\n  /// Maps over an observable sequence using an async-returning function.\n  let mapAsync (f:\u0027a -\u003E Async\u003C\u0027b\u003E) : IObservable\u003C\u0027a\u003E -\u003E IObservable\u003C\u0027b\u003E =\n    bind (f \u003E\u003E ofAsync)\n\nlet filteredTweetsObs\u0027 : IObservable\u003CTweet\u003E =\n  filteredTweetsObs\n  |\u003E Observable.filterAsync filterTweet\n\n\n(**\nWith a little effort, we were able to adapt \u0060IObservable\u003C\u0027a\u003E\u0060 to our needs. Next let\u0027s try implementing the storage of\nfiltered tweets. Again, we can adapt the function \u0060storeTweet\u0060 defined above to the observable model and bind the\nobservable of filtered tweets to it:\n*)\n\nlet storedTweetsObs : IObservable\u003Cunit\u003E =\n  filteredTweetsObs\u0027\n  |\u003E Observable.mapAsync storeTweet\n\n(**\nThe observable sequence \u0060storedTweetsObs\u0060 will produces a value each time a filtered tweet is stored. The entire\nworkflow can be expressed as follows:\n*)\n\nlet storedTeetsObs\u0027 : IObservable\u003Cunit\u003E =\n  tweetsObs\n  |\u003E Observable.filterAsync filterTweet\n  |\u003E Observable.mapAsync storeTweet\n\n(**\nOverall, both solutions are succinct and composable and deciding which one to use can ultimately be a matter of preference. \nSome things to consider are the \u0022synchronous push\u0022 vs. \u0022asynchronous pull\u0022 semantics. On the one hand, tweets are pushed based - the consumer has no control \nover their generation. On the other hand, the program at hand will process the tweets on its own terms regardless of how quickly \nthey are being generated. Moreover, the underlying Twitter API will likely utilize a request-reply protocol to retrieve batches of \ntweets from persistent storage. As such, the distinction between \u0022synchronous push\u0022 vs. \u0022asynchronous pull\u0022 becomes less interesting. If the underlying source \nis truly push-based, then one can buffer its output and consume it using an asynchronous sequence. If the underlying source is pull-based, \nthen one can turn it into an observable sequence by first pulling, then pushing. Note however that in a true real-time reactive system, \nnotifications must be pushed immediately without delay.\n\nUpon closer inspection, the consumption approaches between the two models aren\u0027t all too different. While \u0060AsyncSeq\u0060 is based on an asynchronous-pull operation,\nit is usually consumed using an operator such as \u0060AsyncSeq.iterAsync\u0060 as shown above. This is a function of type \n\u0060(\u0027T -\u003E Async\u003Cunit\u003E) -\u003E AsyncSeq\u003C\u0027T\u003E -\u003E Async\u003Cunit\u003E\u0060 where the first argument is a function \u0060\u0027T -\u003E Async\u003Cunit\u003E\u0060 which performs \nsome work on an item of the sequence and is applied repeatedly to subsequent items. In a sense, \u0060iterAsync\u0060 *pushes* values to this \nfunction. The primary difference from observers of observable sequences is the return type \u0060Async\u003Cunit\u003E\u0060 rather than simply \u0060unit\u0060.\n\n## Related Articles\n\n * [Programming with F# asynchronous sequences](http://tomasp.net/blog/async-sequences.aspx/)\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/index.html","title":"FSharp.Control.AsyncSeq\n","content":"FSharp.Control.AsyncSeq\n=============\n\nFSharp.Control.AsyncSeq is a collection of asynchronous programming utilities for F#.\n\nAn AsyncSeq is a sequence in which individual elements are retrieved using an \u0060Async\u0060 computation.\nThe power of \u0060AsyncSeq\u0060 lies in that many of these operations also have analogs based on \u0060Async\u0060 \nallowing composition of complex asynchronous workflows, including compositional cancellation.\n\nAn \u0060AsyncSeq\u003C\u0027a\u003E\u0060 can be generated using computation expression syntax much like \u0060seq\u003C\u0027a\u003E\u0060:\n\n    let oneThenTwo = asyncSeq {\n      yield 1\n      do! Async.Sleep 1000 // non-blocking sleep\n      yield 2\n    }\n\nLearning\n--------------------------\n\n[AsyncSeq](AsyncSeq.html) contains narrative and code samples explaining asynchronous sequences.\n\n[AsyncSeq Examples](AsyncSeqExamples.html) contains examples.\n\n[Terminology](terminology.html) a reference for some of the terminology around F# async.\n \n[Comparison with IObservable](ComparisonWithIObservable.html) contains discussion about the difference between async sequences and IObservables.\n\n[API Reference](reference/index.html) contains automatically generated documentation for all types, modules and functions in the library. \nThis includes additional brief samples on using most of the functions.\n\nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Apache 2.0 license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fsprojects/FSharp.Control.AsyncSeq/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/FSharp.Control.AsyncSeq\n  [issues]: https://github.com/fsprojects/FSharp.Control.AsyncSeq/issues\n  [readme]: https://github.com/fsprojects/FSharp.Control.AsyncSeq/blob/master/README.md\n  [license]: https://github.com/fsprojects/FSharp.Control.AsyncSeq/blob/master/LICENSE.txt\n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/AsyncSeqExamples.html","title":"F# AsyncSeq Examples\n","content":"(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Control.AsyncSeq/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Control.AsyncSeq.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // IPYNB\n\n(**\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fsprojects/FSharp.Control.AsyncSeq/gh-pages?filepath=AsyncSeqExamples.ipynb)\n\n# F# AsyncSeq Examples\n\n*)\n\n#r \u0022../../../bin/FSharp.Control.AsyncSeq.dll\u0022\nopen System\nopen FSharp.Control\n\n(**\n\n## Group By\n\n\u0060AsyncSeq.groupBy\u0060 partitions an input sequence into sub-sequences with respect to the specified \u0060projection\u0060 function. This operation is the asynchronous analog to \u0060Seq.groupBy\u0060.\n\n### Example Execution\n\nAn example execution can be depicted visually as follows:\n\n\u0060\u0060\u0060\n--------------------------------------------------\n| source  | a0 | a2 | a3 | a4 | a5 |             |\n| key     | k1 | k2 | k1 | k3 |    |             | \n| result  | k1 * [a1,a3] | k2 * [a2] | k3 * [a4] |\n--------------------------------------------------\n\u0060\u0060\u0060\n\n### Use Case\n\nSuppose we would like to consume a stream of events \u0060AsyncSeq\u003CEvent\u003E\u0060 and perform an operation on each event. The operation on each event is of type \u0060Event -\u003E Async\u003Cunit\u003E\u0060. This can be done as follows:\n\n*)\n\n\ntype Event = {\n  entityId : int64\n  data : string \n}\n\nlet stream : AsyncSeq\u003CEvent\u003E =\n  failwith \u0022undefined\u0022\n\nlet action (e:Event) : Async\u003Cunit\u003E =\n  failwith \u0022undefined\u0022\n\nstream \n|\u003E AsyncSeq.iterAsync action\n\n(**\n\nThe above workflow will read an event from the stream, perform an operation and then read the next event.\nWhile the read operation and the operation on the event are *asynchronous*, the stream is processed *sequentially*.\nIt may be desirable to parallelize the processing of the stream. Suppose that events correspond to some entity, \nsuch as a shopping cart. Events belonging to some shopping cart must be processed in a sequential order, however they\nare independent from events belonging to other shopping carts. Therefore, events belonging to distinct shopping carts\ncan be processed in parallel. Using \u0060AsyncSeq.groupBy\u0060, we can partition the stream into a fixed set of sub-streams \nand then process the sub-streams in parallel using \u0060AsyncSeq.mapAsyncParallel\u0060:\n\n*)\n\nstream\n|\u003E AsyncSeq.groupBy (fun e -\u003E int e.entityId % 4)\n|\u003E AsyncSeq.mapAsyncParallel (snd \u003E\u003E AsyncSeq.iterAsync action)\n|\u003E AsyncSeq.iter ignore\n\n(**\n\n\u0060AsyncSeq.groupBy\u0060 partitions the input sequence into sub-sequences based on a key returned by a projection function. \nThe resulting sub-sequences emit elements when the source sequence emits an element corresponding to the key of the \nsub-sequence. Elements of the resulting sequence are pairs of keys and sub-sequences, in this case \u0060int * AsyncSeq\u003CEvent\u003E\u0060. Since by definition, these sub-sequences are independent, they can be processed in parallel. In fact, the sub-sequences *must* be processed in parallel, because it isn\u0027t possible to complete the processing of a sub-sequence until all elements of the source sequence are exhausted.\n\nTo continue improving the efficiency of our workflow, we can make use of batching. Specifically, we can read the incoming\nevents in batches and we can perform actions on entire batches of events.\n\n*)\n\nlet batchStream : AsyncSeq\u003CEvent[]\u003E =\n  failwith \u0022undefined\u0022\n\nlet batchAction (es:Event[]) : Async\u003Cunit\u003E =\n  failwith \u0022undefined\u0022\n\n(**\n\nOrdering is still important. For example, the batch action could write events into a full-text search index. We would like the full-text search index to be sequentially consistent. As such, the events need to be applied in the order they were emitted. The following workflow has the desired properties:\n\n*)\n\nbatchStream\n|\u003E AsyncSeq.concatSeq // flatten the sequence of event arrays\n|\u003E AsyncSeq.groupBy (fun e -\u003E int e.entityId % 4) // partition into 4 groups\n|\u003E AsyncSeq.mapAsyncParallel (snd \n  \u003E\u003E AsyncSeq.bufferByCountAndTime 500 1000 // buffer sub-sequences\n  \u003E\u003E AsyncSeq.iterAsync batchAction) // perform the batch operation\n|\u003E AsyncSeq.iter ignore\n\n(**\n\nThe above workflow:\n\n1. Reads events in batches.\n2. Flattens the batches.\n3. Partitions the events into mutually exclusive sub-sequences.\n4. Buffers elements of each sub-sequence by time and space.\n5. Processes the sub-sequences in parallel, but individual sub-sequences sequentially.\n\n## Merge\n\n\u0060AsyncSeq.merge\u0060 non-deterministically merges two async sequences into one. It is non-deterministic in the sense that the resulting sequence emits elements whenever *either* input sequence emits a value. Since it isn\u0027t always known which will emit a value first, if at all, the operation is non-deterministic. This operation is in contrast to \u0060AsyncSeq.zip\u0060 which also takes two async sequences and returns a single async sequence, but as opposed to emitting an element when *either* input sequence produces a value, it emits an element when *both* sequences emit a value. This operation is also in contrast to \u0060AsyncSeq.append\u0060 which concatenates two async sequences, emitting all element of one, followed by all elements of the another.\n\n### Example Execution\n\nAn example execution can be depicted visually as follows:\n\n\u0060\u0060\u0060\n-----------------------------------------\n| source1 | t0 |    | t1 |    |    | t2 |\n| source2 |    | u0 |    |    | u1 |    |\n| result  | t0 | u0 | t1 |    | u1 | t2 |\n-----------------------------------------\n\u0060\u0060\u0060\n\n### Use Case\n\nSuppose you wish to perform an operation when either of two async sequences emits an element. One way to do this is two start consuming both async sequences in parallel. If we would like to perform only one operation at a time, we can use \u0060AsyncSeq.merge\u0060 as follows:\n*)\n\n/// Represents an stream emitting elements on a specified interval.\nlet intervalMs (periodMs:int) = asyncSeq {\n  yield DateTime.UtcNow\n  while true do\n    do! Async.Sleep periodMs\n    yield DateTime.UtcNow }\n\nlet either : AsyncSeq\u003CDateTime\u003E =\n  AsyncSeq.merge (intervalMs 20) (intervalMs 30)\n\n(**\n\nThe sequence \u0060either\u0060 emits an element every 20ms and every 30ms.\n\n## Combine Latest\n\n\n\u0060AsyncSeq.combineLatest\u0060 non-deterministically merges two async sequences much like \u0060AsyncSeq.merge\u0060, combining their elements using the specified \u0060combine\u0060 function. The resulting async sequence will only contain elements if both of the source sequences produce at least one element. After combining the first elements the source sequences, this operation emits elements when either source sequence emits an element, passing the newly emitted element as one of the arguments to the \u0060combine\u0060 function, the other being the previously emitted element of that type.\n\n### Example Execution\n\nAn example execution can be depicted visually as follows:\n\n\u0060\u0060\u0060\n----------------------------------------\n| source1 | a0 |    |    | a1 |   | a2 |\n| source2 |    | b0 | b1 |    |   |    |\n| result  |    | c0 | c1 | c2 |   | c3 |\n----------------------------------------\n\nwhere\n\nc0 = f a0 b0\nc1 = f a0 b1\nc2 = f a1 b1\nc3 = f a2 b1\n\u0060\u0060\u0060\n\n### Use Case\n\nSuppose we would like to trigger an operation whenever a change occurs. We can represent changes as an \u0060AsyncSeq\u0060. To gain intuition for this, consider the [Consul](https://www.consul.io/)\nconfiguration management system. It stores configuration information in a tree-like structure. For this purpose of this discussion, it can be thought of as a key-value store\nexposed via HTTP. In addition, \u0060Consul\u0060 supports change notifications using HTTP long-polling - when an HTTP GET request is made to retrieve the value of a key, \nif the request specified a modify-index, \u0060Consul\u0060 won\u0027t respond to the request until a change has occurred *since* the modify-index. We can represent this operation using \nthe type \u0060Key * ModifyIndex -\u003E Async\u003CValue * ModifyIndex\u003E\u0060. Next, we can take this operation and turn it into an \u0060AsyncSeq\u0060 of changes as follows:\n*)\n\ntype Key = string\n\ntype Value = string\n\ntype ModifyIndex = int64\n\nlet longPollKey (key:Key, mi:ModifyIndex) : Async\u003CValue * ModifyIndex\u003E =\n  failwith \u0022undefined\u0022\n\nlet changes (key:Key, mi:ModifyIndex) : AsyncSeq\u003CValue\u003E =\n  AsyncSeq.unfoldAsync \n    (fun (mi:ModifyIndex) -\u003E async {\n      let! value,mi = longPollKey (key, mi)\n      return Some (value,mi) })\n    mi\n\n(**\n\nThe function \u0060changes\u0060 produces an async sequence which emits elements whenever the value corresponding to the key changes. Suppose also that we would like to trigger an operation\nwhenever the key changes or based on a fixed interval. We can represent a fixed interval as an async sequence as follows:\n\n*)\n\nlet intervalMs (periodMs:int) = asyncSeq {\n  yield DateTime.UtcNow\n  while true do\n    do! Async.Sleep periodMs\n    yield DateTime.UtcNow }\n\n(**\n\nPutting it all together:\n\n*)\n\nlet changesOrInterval : AsyncSeq\u003CValue\u003E =\n  AsyncSeq.combineLatestWith (fun v _ -\u003E v) (changes (\u0022myKey\u0022, 0L)) (intervalMs (1000 * 60))\n\n\n(**\n\nWe can now consume this async sequence and use it to trigger downstream operations, such as updating the configuration of a running program, in flight.\n\n\n## Distinct Until Changed\n\n\u0060AsyncSeq.distinctUntilChanged\u0060 returns an async sequence which returns every element of the source sequence, skipping elements which equal its predecessor.\n\n## Example Execution\n\nAn example execution can be visualized as follows:\n\n\u0060\u0060\u0060\n-----------------------------------\n| source  | a | a | b | b | b | a |\n| result  | a |   | b |   |   | a |\n-----------------------------------\n\u0060\u0060\u0060\n\n### Use Case\n\nSuppose you\u0027re polling a resource which returns status information of a background job.\n\n*)\n\ntype Status = {\n  completed : int\n  finished : bool\n  result : string\n}\n\n/// Gets the status of a job.\nlet status : Async\u003CStatus\u003E =\n  failwith \u0022\u0022\n\nlet statuses : AsyncSeq\u003CStatus\u003E =\n  asyncSeq {\n    let! s = status\n    while true do\n      do! Async.Sleep 1000\n      let! s = status\n      yield s }\n\n(**\n\nThe async sequence \u0060statuses\u0060 will return a status every second. It will return a status regardless of whether the status changed. Assuming the status changes monotonically, we can use \u0060AsyncSeq.distinctUntilChanged\u0060 to transform \u0060statuses\u0060 into an async sequence of distinct statuses:\n\n*)\n\nlet distinctStatuses : AsyncSeq\u003CStatus\u003E =\n  statuses |\u003E AsyncSeq.distinctUntilChanged\n\n\n(**\n\nFinally, we can create a workflow which prints the status every time a change is detected and terminates when the underlying job reaches the \u0060finished\u0060 state:\n\n*)\n\nlet result : Async\u003Cstring\u003E =\n  distinctStatuses\n  |\u003E AsyncSeq.pick (fun st -\u003E \n    printfn \u0022status=%A\u0022 st\n    if st.finished then Some st.result\n    else None)\n\n(**\n\n## Zip\n\n\n\u0060AsyncSeq.zip : AsyncSeq\u003C\u0027a\u003E -\u003E AsyncSeq\u003C\u0027b\u003E -\u003E AsyncSeq\u003C\u0027a * \u0027b\u003E\u0060 takes a pair of sequences and combines them into a sequence of pairs element wise - the first element of one sequence is paired with the first element of the other, and so on. It can be used to pair sequences of related elements into a single sequence. It can also be used to combine a sequence of elements with a sequence of effects. \n\n### Example Execution\n\nAn example execution can be visually depicted as follows:\n\n\u0060\u0060\u0060\n---------------------------------------------\n| source1  |    a1    |    a2    |          |\n| source2  |    b1    |    b2    |    b3    |\n| result   |  a1 * b1 |  a2 * b2 |          | \n---------------------------------------------\n\u0060\u0060\u0060 \n\nNote that the resulting sequence terminates when either input sequence terminates. \n\n### Use Case\n\nSuppose that we have an async sequence of events consumed from a message bus. We would like to process this sequence but we want to ensure that we\u0027re not processing to fast. We can pair the sequence of events with a sequence of durations corresponding to the minimum consumption time. We can do this as follows:\n\n*)\n\nlet events : AsyncSeq\u003CEvent\u003E =\n  failwith \u0022TODO\u0022\n\nlet eventsAtLeastOneSec =\n  AsyncSeq.zipWith \n    (fun a _ -\u003E a) \n    events \n    (AsyncSeq.replicateInfiniteAsync (Async.Sleep 1000))\n\n(**\n\nThe resulting async sequence \u0060eventsAtLeastOneSec\u0060 will emit an element at-most every second. Note that the input sequence of timeouts is infinite - this is to allow the other sequence to have any length since \u0060AsyncSeq.zipWith\u0060 will terminate when either input sequence terminates.\n\n## Buffer by Time and Count\n\n\u0060AsyncSeq.bufferByTimeAndCount\u0060 consumes the input sequence until a specified number of elements are consumed or a timeout expires at which point the resulting sequence emits the buffered of elements, unless no elements have been buffered. It is similar to \u0060AsyncSeq.bufferByCount\u0060 but allows a buffer to be emitted base on a timeout in addition to buffer size. Both are useful for batching inputs before performing an operation. \u0060AsyncSeq.bufferByTimeAndCount\u0060 allows an async workflow to proceed even if there are no inputs received during a certain time period.\n\n### Example Execution\n\nAn example execution can be visually depicted as follows:\n\n\u0060\u0060\u0060\n-------------------------------------------------------\n| source   |  a1 | a2 | a3         | a4      |        |\n| result   |     |    | [a1,a2,a3] |         |  [a4]  |\n-------------------------------------------------------\n\u0060\u0060\u0060\nThe last event \u0060a4\u0060 is emitted after a timeout.\n\n### Use Case\n\nSuppose we\u0027re writing a service which consumes a stream of events and indexes them into full-text search index. We can index each event one by one, however we get a performance improvement if we buffer events into small batches. We can buffer into fixed size batches using \u0060AsyncSeq.bufferByCount\u0060. However, the source event stream may stop emitting events half way through a batch which would leave those events in the buffer until more events arrive. \u0060AsyncSeq.bufferByTimeAndCount\u0060 allows the async workflow to make progress by imposing a bound on how long a non-empty but incomplete buffer can wait more additional items.\n\n*)\n\nlet individualEvents : AsyncSeq\u003CEvent\u003E =\n  failwith \u0022\u0022\n\nlet bufferSize = 100\nlet bufferTimeout = 1000\n\nlet bufferedEvents : AsyncSeq\u003CEvent[]\u003E =\n  events |\u003E AsyncSeq.bufferByCountAndTime bufferSize bufferTimeout   \n"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/terminology.html","title":"Terminology\n","content":"Terminology\n===========\n\nTerminology is frequently a source of confusion. Often times, terms have different \nmeanings depending on the context, different terms are used to refer to the same \nconcept, and finally not everyone agrees on any of this. The terminology described here \nis scoped to F# and the .NET Framework. The goal is to briefly introduce high level\nconcepts and hopefully alleviate some confusion.\n\n## Thread\n\nA thread in this scope refers to a [managed thread](https://msdn.microsoft.com/en-us/library/6kac2kdh(v=vs.110).aspx). \nA thread is a basic unit to which an OS allocates CPU resources. A *managed* thread usually maps directly to\nan OS thread, however it is possible for a CLR host to override this behavior. A thread has a corresponding context \nconsisting of a pointer to the code being executed as well as stack and register state. \n\nA thread can be viewed as a total ordering of instructions. Instructions executed by different threads\nare partially ordered by causality relationships - in some cases its impossible to tell which ran\nbefore the other. Much of the difficulty in multi-threaded code can be attributed to this lack of \ninformation about ordering.\n\n## Context Switch\n\nA context switch occurs when the OS scheduler decides to change the thread to which it allocates CPU resources.\nIn order to do this, it must save the context of the thread which is giving up use of the CPU and reconstitute\nthe context of the thread which is next in line. Context switches occur for a number of reasons. \nIt occurs naturally as part of preemptive scheduling - threads run for a *time slice* or *quantum* until another\nthread is given a chance to run. Another reason is when a thread explicitly yields its time slice, such as with a call to\n\u0060Thread.Sleep\u0060.\n\n## Synchronous vs. Asynchronous\n\nAn operation is synchronous if the caller must wait for it to complete before making progress. \nMore specifically, the calling *thread* may *block* until the synchronous operation is complete. \nNote that a CPU-bound task exhibits behavior similar to blocking.\n\nAn operation is asynchronous if the request to begin the operation and the result of the operation can\nbe delivered through different channels. This provides a convenient mechanism to encapsulate waiting. In other words, \nan asynchronous operations decouples the means of sending the request from the means of receiving a response. \n\nThis decoupling allows one to in turn decouple the *logical* notion of an operation from the *physical*\ndetails of how it is executed. For example, an asynchronous operation to download a web page is a single \n*logical* operation. Due to its asynchronous nature however, the underlying implementation can start the \noperation on one thread and then deliver the completion notification through a different thread\n(such as an IO completion thread managed by the ThreadPool). In the meantime, the calling thread is free\nto perform other work. In fact, the completion notification can even be handled by the same thread\nas the calling thread.\n\nBy contrast, a synchronous operation will use the calling thread\u0027s context to deliver the completion\nnotification. If the work to be performed is small enough, this can be very efficient. If however the \noperation is long running, the OS will perform a context switch to allow other threads to proceed, and \nthen another context switch to resume the calling thread. Note that synchrony can be viewed as a special\nform of asynchrony.\n\nIn F# asynchrony is represented by the \u0060Async\u0060 type.\n\n## Blocking vs. Non-blocking\n\nA thread is [blocked](http://www.albahari.com/threading/part2.aspx#_Blocking) when its execution\nis paused as it waits for some operation to complete (receiving IO, a lock being released, etc). Once the operation completes, \nthe OS will schedule the thread to resume and continue where it left off.\n\nA non-blocking operation is one that does not prevent the calling thread from making progress. In other words,\nonce an non-blocking operation is started, the calling thread is free to perform other work, such as starting\nyet another operation.\n\nIt is important to remember that when a thread is blocked, the CPU and the system as a whole can still do other work. \nThe issue with blocking is that the specific thread which is blocked can\u0027t do other work and the OS must \nuse resources for thread\u0027s context so that it can context switch continue where it left off once the operating being waited on is complete. \nSince managed threads have a relatively high cost (by default, a .NET thread is allocated 1mb of stack space), this can \nlead to inefficiencies. Non-blocking operations allow one to make more efficient use of system resources.\n\n## Further Reading\n\n * [Managed Threading](https://msdn.microsoft.com/en-us/library/3e8s7xdd%28v=vs.110%29.aspx)\n * [Threading in C#](http://www.albahari.com/threading/)\n * [The Art of Multiprocessor Programming](http://www.amazon.com/Art-Multiprocessor-Programming-Revised-Reprint/dp/0123973376/)"},{"uri":"https://fsprojects.github.io/FSharp.Control.AsyncSeq/AsyncSeq.html","title":"F# Async: FSharp.Control.AsyncSeq\n","content":"(*** condition: prepare ***)\n#nowarn \u0022211\u0022\n#I \u0022../src/FSharp.Control.AsyncSeq/bin/Release/netstandard2.1\u0022\n#r \u0022FSharp.Control.AsyncSeq.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Control.AsyncSeq,{{package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fsprojects/FSharp.Control.AsyncSeq/gh-pages?filepath=AsyncSeq.ipynb)\n\n# F# Async: FSharp.Control.AsyncSeq\n\n\u003E NOTE: There is also the option to use [FSharp.Control.TaskSeq](https://github.com/fsprojects/FSharp.Control.TaskSeq) which has a very similar usage model.\n\nAn AsyncSeq is a sequence in which individual elements are retrieved using an \u0060Async\u0060 computation.\nIt is similar to \u0060seq\u003C\u0027a\u003E\u0060 in that subsequent elements are pulled on-demand.\n\u0060AsyncSeq\u0060 also bears similarity to \u0060IObservable\u003C\u0027a\u003E\u0060 with the former being based on an \u0022asynchronous pull\u0022 and the\nlatter based on a \u0022synchronous push\u0022. Analogs for most operations defined for \u0060Seq\u0060, \u0060List\u0060 and \u0060IObservable\u0060 are also defined for \n\u0060AsyncSeq\u0060. The power of \u0060AsyncSeq\u0060 lies in that many of these operations also have analogs based on \u0060Async\u0060 \nallowing composition of complex asynchronous workflows.\n\nThe \u0060AsyncSeq\u0060 type is located in the \u0060FSharp.Control.AsyncSeq.dll\u0060 assembly which can be loaded in F# Interactive as follows:\n*)\n\n#r \u0022../../../bin/FSharp.Control.AsyncSeq.dll\u0022\nopen FSharp.Control\n\n(**\n### Generating asynchronous sequences\n\nAn \u0060AsyncSeq\u003C\u0027T\u003E\u0060 can be generated using computation expression syntax much like \u0060seq\u003C\u0027T\u003E\u0060:\n*)\n\nlet async12 = asyncSeq {\n  yield 1\n  yield 2\n}\n\n(**\nAnother way to generate an asynchronous sequence is using the \u0060Async.unfoldAsync\u0060 function. This\nfunction accepts as an argument a function which can generate individual elements based on a state and \nsignal completion of the sequence.\n\nFor example, suppose that you\u0027re writing a program which consumes the Twitter API and stores tweets\nwhich satisfy some criteria into a database. There are several asynchronous request-reply interactions at play - \none to retrieve a batch of tweets from the Twitter API, another to determine whether a tweet satisfies some\ncriteria and finally an operation to write the desired tweet to a database. \n\nGiven the type \u0060Tweet\u0060 to represent an individual tweet, the operation to retrieve a batch of tweets can \nbe modeled with type \u0060int -\u003E Async\u003C(Tweet[] * int) option\u003E\u0060 where the incoming \u0060int\u0060 represents the \noffset into the tweet stream. The asynchronous result is an \u0060Option\u0060 which when \u0060None\u0060 indicates the\nend of the stream, and otherwise contains the batch of retrieved tweets as well as the next offset.\n\nThe above function to retrieve a batch of tweets can be used to generate an asynchronous sequence \nof tweet batches as follows:\n*)\n\ntype Tweet = {\n  user : string\n  message : string\n}\n\nlet getTweetBatch (offset: int) : Async\u003C(Tweet[] * int) option\u003E = \n  failwith \u0022TODO: call Twitter API\u0022\n\nlet tweetBatches : AsyncSeq\u003CTweet[]\u003E = \n  AsyncSeq.unfoldAsync getTweetBatch 0\n\n(**\nThe asynchronous sequence \u0060tweetBatches\u0060 will when iterated, incrementally consume the entire tweet stream.\n\nNext, suppose that the tweet filtering function makes a call to a web service which determines\nwhether a particular tweet is of interest and should be stored in the database. This function can be modeled with\ntype \u0060Tweet -\u003E Async\u003Cbool\u003E\u0060. We can flatten the \u0060tweetBatches\u0060 sequence and then filter it as follows:\n*)\n\nlet filterTweet (t: Tweet) : Async\u003Cbool\u003E =\n  failwith \u0022TODO: call web service\u0022\n\nlet filteredTweets : AsyncSeq\u003CTweet\u003E = \n  tweetBatches\n  |\u003E AsyncSeq.concatSeq // flatten\n  |\u003E AsyncSeq.filterAsync filterTweet // filter\n\n(**\nWhen the resulting sequence \u0060filteredTweets\u0060 is consumed, it will lazily consume the underlying\nsequence \u0060tweetBatches\u0060, select individual tweets and filter them using the function \u0060filterTweets\u0060.\n\nFinally, the function which stores a tweet in the database can be modeled by type \u0060Tweet -\u003E Async\u003Cunit\u003E\u0060.\nWe can store all filtered tweets as follows:\n*)\n\nlet storeTweet (t: Tweet) : Async\u003Cunit\u003E =\n  failwith \u0022TODO: call database\u0022\n\nlet storeFilteredTweets : Async\u003Cunit\u003E =\n  filteredTweets\n  |\u003E AsyncSeq.iterAsync storeTweet\n\n(**\nNote that the value \u0060storeFilteredTweets\u0060 is an asynchronous computation of type \u0060Async\u003Cunit\u003E\u0060. At this point,\nit is a *representation* of the workflow which consists of reading batches of tweets, filtering them and storing them\nin the database. When executed, the workflow will consume the entire tweet stream. The entire workflow can be\nsuccinctly declared and executed as follows:\n*)\n\nAsyncSeq.unfoldAsync getTweetBatch 0\n|\u003E AsyncSeq.concatSeq\n|\u003E AsyncSeq.filterAsync filterTweet\n|\u003E AsyncSeq.iterAsync storeTweet\n|\u003E Async.RunSynchronously\n\n(**\nThe above snippet effectively orchestrates several asynchronous request-reply interactions into a cohesive unit\ncomposed using familiar operations on sequences. Furthermore, it will be executed efficiently in a non-blocking manner.\n*)\n\n(**\n### Comparison with seq\u003C\u0027T\u003E\n\nThe central difference between \u0060seq\u003C\u0027T\u003E\u0060 and \u0060AsyncSeq\u003C\u0027T\u003E\u0060 can be illustrated by introducing the notion of time.\nSuppose that generating subsequent elements of a sequence requires an IO-bound operation. Invoking long \nrunning IO-bound operations from within a \u0060seq\u003C\u0027T\u003E\u0060 will *block* the thread which calls \u0060MoveNext\u0060 on the \ncorresponding \u0060IEnumerator\u0060. An \u0060AsyncSeq\u0060 on the other hand can use facilities provided by the F# \u0060Async\u0060 type to make \nmore efficient use of system resources.\n*)\n\nlet withTime = seq {\n  Thread.Sleep(1000) // calling thread will block\n  yield 1\n  Thread.Sleep(1000) // calling thread will block\n  yield 1\n}\n\nlet withTime\u0027 = asyncSeq {\n  do! Async.Sleep 1000 // non-blocking sleep\n  yield 1\n  do! Async.Sleep 1000 // non-blocking sleep\n  yield 2\n}\n\n(**\nWhen the asynchronous sequence \u0060withTime\u0027\u0060 is iterated, the calls to \u0060Async.Sleep\u0060 won\u0027t block threads. Instead,\nthe *continuation* of the sequence will be scheduled by \u0060Async\u0060 while the calling thread will be free to perform other work. \nOverall, a \u0060seq\u003C\u0027a\u003E\u0060 can be viewed as a special case of an \u0060AsyncSeq\u003C\u0027a\u003E\u0060 where subsequent elements are retrieved\nin a blocking manner.\n\n### Performance Considerations\n\nWhile an asynchronous computation obviates the need to block an OS thread for the duration of an operation, it isn\u0027t always the case\nthat this will improve the overall performance of an application. Note however that an async computation does not *require* a\nnon-blocking operation, it simply allows for it. Also of note is that unlike calling \u0060IEnumerable.MoveNext()\u0060, consuming\nan item from an asynchronous sequence requires several allocations. Usually this is greatly outweighed by the\nbenefits, it can make a difference in some scenarios.\n\n## Related Articles\n\n * [Programming with F# asynchronous sequences](http://tomasp.net/blog/async-sequences.aspx/)\n\n*)"}]